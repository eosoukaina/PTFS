#!/usr/bin/env python3
import os
import argparse
import json
def check() :
    sys_file_path =os.path.expanduser("~/ptfs/sys/sys.json")

    try:
        with open(sys_file_path, 'r') as sys_file:
            sys_data = json.load(sys_file)
            status = sys_data.get("status", "")
    except FileNotFoundError:
        print("Error: sys.json file not found.")
        exit(1)
    except json.JSONDecodeError:
        print("Error: Unable to decode sys.json file.")
        exit(1)

    if status.lower() == "off":
        print("ptfs is off.")
        exit(1)

def display_tree(folder_path, indent=""):
    try:
        folder_path = os.path.normpath(os.path.join(os.getcwd(), folder_path))
        folder_name = os.path.basename(folder_path)
        if not folder_path.startswith(os.path.expanduser("~/ptfs")) or not os.path.exists(folder_path):
            print("Error: Invalid folder path.")
            return
        
        print(f"{indent}+-- {folder_name}")

        items = os.listdir(folder_path)
        items.sort()

        for item in items:
            item_path = os.path.join(folder_path, item)
            if os.path.isdir(item_path):
                display_tree(item_path, indent + "    ")
            else:
                print(f"{indent}    |-- {item}")

    except FileNotFoundError:
        print(f"Error: {folder_path} not found.")
    except Exception as e:
        print(f"Error displaying tree: {e}")

if __name__ == "__main__":
    check()
    parser = argparse.ArgumentParser(description="Display the tree structure of a folder within '~/ptfs'.")
    parser.add_argument("folder_path", help="Relative path of the folder within '~/ptfs'.")

    args = parser.parse_args()
    folder_path = args.folder_path

    display_tree(folder_path)

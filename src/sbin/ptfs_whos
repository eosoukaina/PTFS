#!/usr/bin/env python3

import json
import os
import argparse
def check() :
    sys_file_path =os.path.expanduser("~/ptfs/sys/sys.json")

    try:
        with open(sys_file_path, 'r') as sys_file:
            sys_data = json.load(sys_file)
            status = sys_data.get("status", "")
    except FileNotFoundError:
        print("Error: sys.json file not found.")
        exit(1)
    except json.JSONDecodeError:
        print("Error: Unable to decode sys.json file.")
        exit(1)

    if status.lower() == "off":
        print("ptfs is off.")
        exit(1)

check()
SUDOERS_FILE_PATH = os.path.expanduser("~/ptfs/etc/sudoers_file.json")
SYS_FILE_PATH = os.path.expanduser("~/ptfs/sys/sys.json")
def is_user_root():
    try:
        with open(SYS_FILE_PATH, 'r') as sys_file:
            sys_data = json.load(sys_file)
            return sys_data.get("connected_user") == "root"
    except FileNotFoundError:
        print(f"Error: {SYS_FILE_PATH} not found.")
        return False
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {SYS_FILE_PATH}.")
        return False

def read_sudoers_keys():
    try:
        with open(SUDOERS_FILE_PATH, 'r') as sudoers_file:
            sudoers_data = json.load(sudoers_file)

        for key in sudoers_data.keys():
            print(key)

    except FileNotFoundError:
        print(f"Error: {SUDOERS_FILE_PATH} not found.")
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {SUDOERS_FILE_PATH}.")
    except Exception as e:
        print(f"Error reading sudoers keys: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Change user information")
    args = parser.parse_args()

    if not is_user_root():
        print("Permission deneid: Only sudo can view list of sudoers.")
    else:
        read_sudoers_keys()


#!/usr/bin/env python3

import os
import json
import argparse
import time

def check() :
    sys_file_path =os.path.expanduser("~/ptfs/sys/sys.json")

    try:
        with open(sys_file_path, 'r') as sys_file:
            sys_data = json.load(sys_file)
            status = sys_data.get("status", "")
    except FileNotFoundError:
        print("Error: sys.json file not found.")
        exit(1)
    except json.JSONDecodeError:
        print("Error: Unable to decode sys.json file.")
        exit(1)

    if status.lower() == "off":
        print("ptfs is off.")
        exit(1)

check()
def delete_file(file_path):
    home_directory = os.path.expanduser("~")
    # Get the directory path
    directory_path = os.path.dirname(os.path.abspath(file_path))
    
    # Read the system file to get the current user
    sys_file_path = os.path.join(home_directory, "ptfs/sys/sys.json")
    file_path = os.path.abspath(file_path)
    
    try:
        with open(sys_file_path, 'r') as sys_file:
            sys_data = json.load(sys_file)
            current_user = sys_data.get("connected_user", "")
    except FileNotFoundError as e:
        print(f"Error: {e}. Make sure the required files exist.")
        return False
    home_path = os.path.join(home_directory, "ptfs/home", current_user)
    # Check if the user is not root and the directory path is invalid
    if current_user != "root" and not directory_path.startswith(home_path):
        print("Error: Permission denied. You can only delete directories in your home directory.")
        return False
    try:

        # Get the metadata file path
        metadata_file_path = os.path.join(directory_path, ".metadata.json")

        # Load existing metadata
        metadata = load_metadata(metadata_file_path)

        # Delete file metadata
        delete_file_metadata(file_path, metadata)

        # Update metadata for the directory
        update_directory_metadata(directory_path, metadata)

        # Save updated metadata to .metadata.json
        save_metadata(metadata_file_path, metadata)

        # Delete the file
        os.remove(file_path)

        return True
    except Exception as e:
        print(f"Error deleting file: {e}")
        return False

def load_metadata(metadata_file_path):
    try:
        if os.path.exists(metadata_file_path):
            with open(metadata_file_path, 'r') as metadata_file:
                return json.load(metadata_file)
        else:
            return {}
    except Exception as e:
        print(f"Error loading metadata: {e}")
        return {}

def save_metadata(metadata_file_path, metadata):
    try:
        with open(metadata_file_path, 'w') as metadata_file:
            json.dump(metadata, metadata_file, indent=4)
    except Exception as e:
        print(f"Error saving metadata: {e}")

def delete_file_metadata(file_path, metadata):
    try:
        # Get the parent directory's metadata key
        directory_path = os.path.dirname(file_path)
        metadata_key = os.path.basename(directory_path)

        # Delete file metadata from the parent directory's metadata
        file_name = os.path.basename(file_path)
        if metadata_key in metadata and "files" in metadata[metadata_key] and file_name in metadata[metadata_key]["files"]:
            del metadata[metadata_key]["files"][file_name]
    except Exception as e:
        print(f"Error deleting file metadata: {e}")

def update_directory_metadata(directory_path, metadata):
    try:
        # Update metadata for the directory
        metadata_key = os.path.basename(directory_path)
        metadata_item = metadata.get(metadata_key, {})

        # Decrement the number of items
        metadata_item["items"] = max(metadata_item.get("items", 0) - 1, 0)

        # Update the metadata dictionary
        metadata[metadata_key] = metadata_item
    except Exception as e:
        print(f"Error updating directory metadata: {e}")

if __name__ == "__main__":
    # Create an argument parser
    parser = argparse.ArgumentParser(description="Delete a file and update directory metadata.")
    parser.add_argument("file_path", help="Path of the file to be deleted.")

    # Parse the arguments
    args = parser.parse_args()

    # Call the delete_file function with the provided file path
    delete_file(args.file_path)


#!/usr/bin/env python3

import json
import subprocess
import getpass
import sys
import hashlib
import os
def check() :
    sys_file_path =os.path.expanduser("~/ptfs/sys/sys.json")

    try:
        with open(sys_file_path, 'r') as sys_file:
            sys_data = json.load(sys_file)
            status = sys_data.get("status", "")
    except FileNotFoundError:
        print("Error: sys.json file not found.")
        exit(1)
    except json.JSONDecodeError:
        print("Error: Unable to decode sys.json file.")
        exit(1)

    if status.lower() == "off":
        print("ptfs is off.")
        exit(1)

check()
SYS_FILE_PATH = os.path.expanduser("~/ptfs/sys/sys.json")
USERS_FILE_PATH = os.path.expanduser("~/ptfs/etc/users_file.json")
SUDOERS_FILE_PATH = os.path.expanduser("~/ptfs/etc/sudoers_file.json")

def load_system_data():
    try:
        with open(SYS_FILE_PATH, 'r') as sys_file:
            return json.load(sys_file)
    except FileNotFoundError as e:
        print(f"Error: {e}. Make sure the required files exist.")
        return None
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from {SYS_FILE_PATH}: {e}")
        return None

def save_system_data(data):
    try:
        with open(SYS_FILE_PATH, 'w') as sys_file:
            json.dump(data, sys_file, indent=4)
    except FileNotFoundError as e:
        print(f"Error: {e}. Make sure the required files exist.")
    except Exception as e:
        print(f"Error saving system data: {e}")

def authenticate_user(username, entered_password):
    users_file_path = USERS_FILE_PATH
    if not username or not entered_password or not users_file_path:
        print("Invalid parameters for user authentication.")
        return False

    try:
        with open(users_file_path, 'r') as users_file:
            users_data = json.load(users_file)
            stored_password_hash = users_data.get(username, {}).get("password", "")
            entered_password_hash = hash_password(entered_password)

            return stored_password_hash == entered_password_hash
    except FileNotFoundError as e:
        print(f"Error: {e}. Make sure the required files exist.")
        return False
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from {users_file_path}: {e}")
        return False

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def is_user_in_sudoers(username):
    try:
        with open(SUDOERS_FILE_PATH, 'r') as sudoers_file:
            sudoers_data = json.load(sudoers_file)

        return username in sudoers_data

    except FileNotFoundError:
        print(f"Error: {SUDOERS_FILE_PATH} not found.")
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {SUDOERS_FILE_PATH}.")
    except Exception as e:
        print(f"Error checking user in sudoers: {e}")
    
    return False

def is_root_connected():
    sys_data = load_system_data()
    return sys_data.get("connected_user") == "root"

def switch_to_root():
    sys_data = load_system_data()
    current_user = sys_data.get("connected_user")
    if not current_user:
        print("No user is currently connected.")
        sys.exit(1)

    if is_root_connected():
        return None

    if is_user_in_sudoers(current_user):
        entered_password = getpass.getpass(f"[sudo] password for {current_user}: ")
        if not authenticate_user(current_user, entered_password):
            print("Authentication failed. Invalid password.")
            sys.exit(1)

        sys_data["connected_user"] = "root"
        save_system_data(sys_data)
    else:
        print(f"User {current_user} is not in sudoers. Exiting.")
        sys.exit(1)

    return current_user

def reswitch_to_original_user(original_user):
    sys_data = load_system_data()
    if not original_user:
        sys.exit(1)

    sys_data["connected_user"] = original_user
    save_system_data(sys_data)

def main():
    if len(sys.argv) < 2:
        print("Usage: sudo.py <script_name> [script_arguments]")
        sys.exit(1)

    script_name = sys.argv[1]
    script_arguments = sys.argv[2:]

    # Check if script is "chdir"
    if (os.path.basename(script_name) == "ptfs_cd" or os.path.basename(script_name) == "who.py") :
        print("command not found with privilege sudo .")
        sys.exit(1)


    original_user = switch_to_root()
    
    try:
        command = f"{script_name} {' '.join(script_arguments)}"
        os.system(command)
    except subprocess.CalledProcessError as e:
        print(f"Error executing {script_name}: {e}")

    reswitch_to_original_user(original_user)

if __name__ == "__main__":
    main()


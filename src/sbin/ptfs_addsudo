#!/usr/bin/env python3

import json
import argparse
import os
def check() :
    sys_file_path =os.path.expanduser("~/ptfs/sys/sys.json")

    try:
        with open(sys_file_path, 'r') as sys_file:
            sys_data = json.load(sys_file)
            status = sys_data.get("status", "")
    except FileNotFoundError:
        print("Error: sys.json file not found.")
        exit(1)
    except json.JSONDecodeError:
        print("Error: Unable to decode sys.json file.")
        exit(1)

    if status.lower() == "off":
        print("ptfs is off.")
        exit(1)

SUDOERS_FILE_PATH = os.path.expanduser("~/ptfs/etc/sudoers_file.json")
SYS_FILE_PATH = os.path.expanduser("~/ptfs/sys/sys.json")
USERS_FILE_PATH = os.path.expanduser("~/ptfs/etc/users_file.json")

def is_user_in_sudoers(username):
    try:
        with open(SUDOERS_FILE_PATH, 'r') as sudoers_file:
            sudoers_data = json.load(sudoers_file)

        return username in sudoers_data

    except FileNotFoundError:
        print(f"Error: {SUDOERS_FILE_PATH} not found.")
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {SUDOERS_FILE_PATH}.")
    except Exception as e:
        print(f"Error checking user in sudoers: {e}")

    return False

def is_user_existing(username):
    try:
        with open(USERS_FILE_PATH, 'r') as users_file:
            users_data = json.load(users_file)

        return username in users_data

    except FileNotFoundError:
        print(f"Error: {USERS_FILE_PATH} not found.")
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {USERS_FILE_PATH}.")
    except Exception as e:
        print(f"Error checking user existence: {e}")

    return False

def get_connected_user():
    try:
        with open(SYS_FILE_PATH, 'r') as sys_file:
            sys_data = json.load(sys_file)
            return sys_data.get("connected_user")
    except FileNotFoundError:
        print(f"Error: {SYS_FILE_PATH} not found.")
        return None
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {SYS_FILE_PATH}.")
        return None

def add_user_to_sudoers(new_user, current_user):
    try:
        # Check if the user is the root of SFS
        if new_user == "root":
            print("Root is already a superuser and cannot be added to sudoers.")
            return

        # Check if the user is already in sudoers
        if is_user_in_sudoers(new_user):
            print(f"User {new_user} is already in sudoers.")
            return

        # Check if the user exists
        if not is_user_existing(new_user):
            print(f"Error: User {new_user} does not exist.")
            return

        # Check if the user is the root of SFS
        if current_user != "root":
            print("Only sudoers can add users to sudoers.")
            return

        with open(SUDOERS_FILE_PATH, 'r') as sudoers_file:
            sudoers_data = json.load(sudoers_file)

        # Add the user to sudoers
        sudoers_data[new_user] = True

        # Update the sudoers file
        with open(SUDOERS_FILE_PATH, 'w') as sudoers_file:
            json.dump(sudoers_data, sudoers_file, indent=4)

        print(f"User {new_user} added to sudoers successfully.")

    except FileNotFoundError:
        print(f"Error: {SUDOERS_FILE_PATH} not found.")
    except json.JSONDecodeError:
        print(f"Error decoding JSON from {SUDOERS_FILE_PATH}.")
    except Exception as e:
        print(f"Error adding user to sudoers: {e}")

if __name__ == "__main__":
    check()
    parser = argparse.ArgumentParser(description="Add a user to the sudoers list.")
    parser.add_argument("username", help="Username to add to sudoers.")
    args = parser.parse_args()

    current_user = get_connected_user()
    add_user_to_sudoers(args.username, current_user)
